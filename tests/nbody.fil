

let sun = [0, 0, 0, 0, 0, 0, 0]
let jupiter = [0, 0, 0, 0, 0, 0, 0]
let saturn = [0, 0, 0, 0, 0, 0, 0]
let uranus = [0, 0, 0, 0, 0, 0, 0]
let neptune = [0, 0, 0, 0, 0, 0, 0]



let PI = 3.141592653589793
let SOLAR_MASS = 4 * PI * PI
let DAYS_PER_YEAR = 365.24
sun[0] = 0.0
sun[1] = 0.0
sun[2] = 0.0
sun[3] = 0.0
sun[4] = 0.0
sun[5] = 0.0
sun[6] = SOLAR_MASS
jupiter[0] = 4.84143144246472090
jupiter[1] = -1.16032004402742839
jupiter[2] = -1.03622044471123109 / 10.0
jupiter[3] = 1.66007664274403694 / 1000.0 * DAYS_PER_YEAR
jupiter[4] = 7.69901118419740425 / 1000.0 * DAYS_PER_YEAR
jupiter[5] = -6.90460016972063023 / 100000.0 * DAYS_PER_YEAR
jupiter[6] = 9.54791938424326609 / 10000.0 * SOLAR_MASS
saturn[0] = 8.34336671824457987
saturn[1] = 4.12479856412430479
saturn[2] = -4.03523417114321381 / 10.0
saturn[3] = -2.76742510726862411 / 1000.0 * DAYS_PER_YEAR
saturn[4] = 4.99852801234917238 / 1000.0 * DAYS_PER_YEAR
saturn[5] = 2.30417297573763929 / 100000.0 * DAYS_PER_YEAR
saturn[6] = 2.85885980666130812 / 10000.0 * SOLAR_MASS
uranus[0] = 1.28943695621391310 * 10.0
uranus[1] = -1.51111514016986312 * 10.0
uranus[2] = -2.23307578892655734 / 10.0
uranus[3] = 2.96460137564761618 / 1000.0 * DAYS_PER_YEAR
uranus[4] = 2.37847173959480950 / 1000.0 * DAYS_PER_YEAR
uranus[5] = -2.96589568540237556 / 100000.0 * DAYS_PER_YEAR
uranus[6] = 4.36624404335156298 / 100000.0 * SOLAR_MASS
neptune[0] = 1.53796971148509165 * 10.0
neptune[1] = -2.59193146099879641 * 10.0
neptune[2] = 1.79258772950371181 / 10.0
neptune[3] = 2.68067772490389322 / 1000.0 * DAYS_PER_YEAR
neptune[4] = 1.62824170038242295 / 1000.0 * DAYS_PER_YEAR
neptune[5] = -9.51592254519715870 / 100000.0 * DAYS_PER_YEAR
neptune[6] = 5.15138902046611451 / 100000.0 * SOLAR_MASS

let bodies = [sun, jupiter, saturn, uranus, neptune]

func advance(N, bodies, dt):
  let numbodies = len(bodies)
  for i2 in N:
    for i in numbodies:
      let bi = bodies[i]
      let bix = bi[0]
      let biy = bi[1]
      let biz = bi[2]
      let bimass = bi[6]
      let i1 = i + 1
      for j in numbodies - i - 1:
        let bj = bodies[j + i1]
        let dx = bix-bj[0]
        let dy = biy-bj[1]
        let dz = biz-bj[2]
        let dist2 = dx*dx + dy*dy + dz*dz
        let mag = sqrt(dist2)
        mag = dt / (mag * dist2)
        let bm = bj[6]*mag
        bi[3] -= (dx * bm)
        bi[4] -= (dy * bm)
        bi[5] -= (dz * bm)
        bm = bimass*mag
        bj[3] += (dx * bm)
        bj[4] += (dy * bm)
        bj[5] += (dz * bm)
      end
      bi[0] += dt * bi[3]
      bi[1] += dt * bi[4]
      bi[2] += dt * bi[5]
    end
  end
end

func energy(bodies):
  let e = 0
  for i in len(bodies):
    let bi = bodies[i]
    let vx = bi[3]
    let vy = bi[4]
    let vz = bi[5]
    let bim = bi[6]
    e = e + (0.5 * bim * (vx*vx + vy*vy + vz*vz))
    for j in len(bodies) - i - 1:
      let bj = bodies[j + i + 1]
      let dx = bi[0]-bj[0]
      let dy = bi[1]-bj[1]
      let dz = bi[2]-bj[2]
      let distance = sqrt(dx*dx + dy*dy + dz*dz)
      e -= ((bim * bj[6]) / distance)
    end
  end
  return e
end

func offsetMomentum(b):
  let px = 0
  let py = 0
  let pz = 0
  for i in len(bodies):
    let bi = b[i]
    let bim = bi[6]
    px = px + (bi[3] * bim)
    py = py + (bi[4] * bim)
    pz = pz + (bi[5] * bim)
  end
  b[0][3] = px * -1.0 / SOLAR_MASS
  b[0][4] = py * -1.0 / SOLAR_MASS
  b[0][5] = pz * -1.0 / SOLAR_MASS
end

let N = 1000000

offsetMomentum(bodies)
print(energy(bodies))
#for i in N: advance(bodies, 0.01) end
advance(N, bodies, 0.01)
print(energy(bodies))

